/*
   BubbleSort C 
   */
 (ésta es la implemntación del Algoritmo de ordnación "BubbleSort").

#include <stdio.h>
(sirven para las operaciones de entrada y salida).
#include <time.h>
 (sirven para  los números o las horas del sistema).
 

#define ARRAY_SIZE 10
 (básicamente, lo usamos para decirle al programa cuántos números va a ordenar).
 

int i;
int change;
int n;
int a[ARRAY_SIZE];
int buf;
time_t seed;
(son variables que usamos en todo el programa, estos pueden ordenar, intercambiar elementos o definir el tamaño del ARRAY_SIZE )

 


int main(int argc, char* argv[])
(main es una funci+on, la principal del programa en este caso).
{
  seed = 0;
  srand(time(&seed));
  (configuración para que al ejecutar inicie desde 0 y obtener números aleatorios).
  
  n = sizeof(a) / sizeof(*a);
  for (i = 0; i <= n-1; i++)
  {
    a[i] = rand() % 1000;
  }
(ésto llena los elementos con números entre 0 y 999).
 

  for (i = 0; i <= n-1; i++)
  (indica que con cada elemento haremos algo).
  {
    printf("Element a[%d]: %d\n", i, a[i]);
  }
  (sirven para imprimir los elementos antes de que se ordenen)
  change = 1;
  while (change == 1)
  {
    change = 0;
    for (i = 0; i <= n-2; i++)
    {
      if (a[i] > a[i+1])
      {
        buf = a[i];
        a[i] = a[i+1];
        a[i+1] = buf;
        change = 1;
      }
    }
  }
  (todo este código implementa un algoritmo de orden)
  printf("\n----------------\n");
  for (i = 0; i <= n-1; i++)
  {
    printf("Element a[%d]: %d\n", i, a[i]);
  }
  (aquí se imprimen los elementos del arreglo una vez que que realice la ordenación)
  return 0;
  (aqui es donde se puede ejecutar el programa y el 0 lo devuelve porque es de salida)